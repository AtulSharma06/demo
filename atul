
@Repository
public interface YourEntityRepository extends JpaRepository<YourEntity, Long> {
}
@Service
public class YourService {

    @Autowired
    private YourEntityRepository yourEntityRepository;

    public void updateColumn(Long id, String newValue) {
        Optional<YourEntity> optionalEntity = yourEntityRepository.findById(id);
        
        if (optionalEntity.isPresent()) {
            YourEntity entity = optionalEntity.get();
            entity.setColumnName(newValue); // Set the new value for the column you want to update
            yourEntityRepository.save(entity); // Save the updated entity
        } else {
            // Handle the case when the entity with the given ID is not found
        }
    }
}
@RestController
@RequestMapping("/your-entity")
public class YourController {

    @Autowired
    private YourService yourService;

    @PutMapping("/{id}")
    public ResponseEntity<String> updateColumn(@PathVariable Long id, @RequestParam String newValue) {
        try {
            yourService.updateColumn(id, newValue);
            return ResponseEntity.ok("Column updated successfully.");
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to update column.");
        }
    }
}
 
 
 
 // sol2 
 @RestController
@RequestMapping("/students")
public class StudentController {

    @Autowired
    private StudentService studentService;

    @PutMapping("/{id}")
    public ResponseEntity<String> updateStudent(@PathVariable Long id, @RequestBody Map<String, Object> updatedFields) {
        try {
            studentService.updateStudent(id, updatedFields);
            return ResponseEntity.ok("Student details updated successfully.");
        } catch (NotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to update student details.");
        }
    }
}


@Service
public class StudentService {
    
    @Autowired
    private StudentRepository studentRepository;
    
    public void updateStudent(Long studentId, Map<String, Object> updatedFields) {
        Optional<Student> optionalStudent = studentRepository.findById(studentId);
        
        if (optionalStudent.isPresent()) {
            Student student = optionalStudent.get();
            
            // Iterate over the updated fields map and set the new values
            for (Map.Entry<String, Object> entry : updatedFields.entrySet()) {
                String field = entry.getKey();
                Object value = entry.getValue();
                
                // Use reflection to set the field value dynamically
                try {
                    Field declaredField = student.getClass().getDeclaredField(field);
                    declaredField.setAccessible(true);
                    declaredField.set(student, value);
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    throw new IllegalArgumentException("Invalid field: " + field);
                }
            }
            
            studentRepository.save(student);
        } else {
            throw new NotFoundException("Student not found with ID: " + studentId);
        }
    }
}



// delete code
@RestController
@RequestMapping("/students")
public class StudentController {

    @Autowired
    private StudentService studentService;

    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteStudent(@PathVariable Long id) {
        try {
            studentService.deleteStudent(id);
            return ResponseEntity.ok("Student deleted successfully.");
        } catch (NotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to delete student.");
        }
    }
}


@Service
public class StudentService {
    
    @Autowired
    private StudentRepository studentRepository;
    
    public void deleteStudent(Long studentId) {
        Optional<Student> optionalStudent = studentRepository.findById(studentId);
        
        if (optionalStudent.isPresent()) {
            studentRepository.delete(optionalStudent.get());
        } else {
            throw new NotFoundException("Student not found with ID: " + studentId);
        }
    }
}

